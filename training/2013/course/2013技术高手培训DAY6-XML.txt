技术高手培训DAY6
 
课程主题：XML
 
主讲：秦金卫(kimmking)
 
本次整理：王怡冬（屁冬）
 
时间：2013-11-20

1,XML是用来做什么的？

本质上说就是一种信息表达方式。
可以用来做配置文件、数据存储传输，文档描述，也可以结合具体的专业领域，形成应用层面的格式协议,配置文件，比如spring hibernate ibatis log4j，在没有xml之前，一般用properties或ini文件来描述。
properties，就是一个简单的k－v集合。
ini除了是k－v，还有section的概念，可以简单的对k－v分组。比如mysql的配置文件 my.ini 
[section1]
k1=v1
k2=v2

[section2]
k3=v3
类似这样。

传统的数据传输格式呢？ 常见的有json、CSV等文本格式，也可以是自定义的二进制格式。
json大家应该都很熟悉。
CSV，常用于excel或数据库表的导出
就是一个文本文件，每一行文本是逗号分割的一行数据，
例如
1,zhangsan,80
2,lisi,90
3,wangwu,70

如果内容里有逗号怎么办？
规范的CSV，文本需要用引号引起来，而且其实行和列的分隔符，都可以自定义。
如果定义成 字符串里不会出现的 控制字符，
就会解决很多问题。

可以看出来，这些文本格式的配置方式或数据格式，简单易用，为什么还会有xml出现呢？

因为xml能表达除了数据本身以外的其他信息,纯文件＋上面的这种太简单的几乎没有什么规范的方式，描述能力，非常有限,包括json。
ini properties 太简单，简单到不能表达复杂点的结构化数据。json CSV，无法描述类型信息。

2,xml的优劣势

xml是96-99年，逐渐成型的。

xml的优势：

json里，数据一般只有string和number。而且，json的关系里除了嵌套，只有k－v
XML里有Node和Attribute，通过更复杂的技术手段，我们定义了XML的严格规范，并且丰富了它的类型和结构。使得XML变成一种通用的、功能强大的文本数据描述方式。

作为配置文件，可以描述比ini properties更复杂的数据。
作为数据传输方式，可以表达比json CSV更准确的数据。

此外，还可以被用来做文档描述格式
比如 ooxml来表示的ms office2007以后的文件。
跟html结合的xhtml，更深入的，因为xml的准确规范与通用性，它可以结合特定领域，形成非常多的应用层面的协议，比如 VML，比如SOAP、WSDL，等等。


缺点：

跟json比，XML的缺点就是更复杂。
跟自定义的二进制数据格式相比，XML的缺点就是数据量很大，处理速度慢，比较耗CPU。看一下XML文件里有多少重复的信息就明白。
耗cpu，处理慢，是因为解析xml需要一直查找节点位置。这是个计算密集型的工作。所以经常会有人说xml性能低。


但这些并不妨碍XML成为目前应用最广泛的数据格式。格式上，有XSD、DTD定义和约束。其他文本格式，都没有这种严格性。
DTD作为文档方式描述了XML的定义。XSD则从元数据的角度，严格定义了XML的元素与关系。

然后从这些元数据出发，我们可以生成、校验 XML的正确性。
这样，我们在编辑器里可以编辑时就知道xml格式是否正确，而 json 我们只有在运行时才能知道拼出来的格式不对。

一般的xml处理工具，解析之前，就会加载 namespace里指定的XSD，然后来做校验。WSDL和SOAP 也一样。转换成处理结果之前，会先validate。如果指定了XML但是找不到，校验失败。

一个XML可以看作是一个大的DOM树。从这棵树的结构出发，产生了几个XML的小工具。


3,xml的处理工具

XPath，根据层次关系来获取XML中指定的数据。
XQuery，对XML进行查询。
XSLT，对xml进行分析和转换

除了XSLT之外，常见的xml转换，一般都是xml－bean的。比如XMLbeans jaxb xstream 等等。

其中xstream 非常轻量级。
XMLbeans是基于XSD的，走的是解析和生成，完全代码生成的路线。熟悉XSD的话，就非常好用。 spring－xbean 就是基于 xmlbeans的。activemq的配置文件，是用它做的。

4,xml解析技术

XML的几种解析技术，还出了一个StAX

DOM  
DOM是最常见和自然的处理方式。
整个xml文件，加载到内存，解析成一个个的节点，然后组合成一棵树。
优点，可以支持Xpath等技术，可以重复来回读取数据。可以修改后，整个写xml。
缺点，慢，耗内存，大概是xml的10倍数量级。

可用于处理少量xml，或者小xml文件，重复读写dom节点的文件。

疑问：xstream是基于DOM的解析机制么？
解析和转换xml是两件事，一般情况，可以配置不同的解析库



SAX 
SAX和StAX 差不多。都是 每次读一点xml数据，拿到一个节点，通知你来处理，然后继续下一个节点，而不是拿整个xml来一次处理，一般也不组成dom树，所以，快，基本不怎么耗内存。
缺点，不能重复读（就是读过的节点，没法再拿到），不能用XPath等来操作。

适用于一遍处理，或者只处理大xml文件中指定的某些节点，特别是大文件和海量的xml文件，SAX非常有优势。




VTD－XML


VTD是比较新的xml处理方式。它是按二进制的方式先分析XML文件，拿到所有的token，建立一个索引，然后操作节点的时候，从索引找到节点的二进制offset，操作二进制。从而综合了DOM和SAX的优点。
占用内存大概是 XML同等级别略多一点。多重复读，支持修改操作，支持Xpath，处理速度非常快。现在一些高性能的xml转换处理，都改用VTD-XML了。

缺点，官方提供的API，非常难用。

疑问：XML中的“大”和“小”怎么定义，是按数据量来定义还是按XML节点数量来定义？
超过100K的XML，一般就算不小了，1M的，肯定算大文件了。

5,作业，学习VTD-XML
























